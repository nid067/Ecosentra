<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Home Civic Engagement Home</title>
  <style>
    :root{
      --green-700: #19744a;
      --green-600: #1a8357;
      --muted: #f4edea;
      --card-start: #fff7e3;
      --card-end: #e0f7e8;
      --bg-orange: #ff9800;
      --bg-green: #4caf50;
      --white: #fff;
    }
    * { box-sizing: border-box; -webkit-tap-highlight-color: transparent; }
    body {
      margin: 0;
      font-family: 'Segoe UI', Arial, sans-serif;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      background: linear-gradient(120deg, var(--bg-orange) 0%, var(--bg-green) 100%);
    }
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 28px 36px 18px 36px;
      background: rgba(255,255,255,0.82);
      border-bottom-left-radius: 18px;
      border-bottom-right-radius: 18px;
      box-shadow: 0 2px 20px rgba(255,152,0,0.08);
    }
    .welcome-container {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
    }
    header h1 {
      margin: 0 0 4px 0;
      font-size: 1.7rem;
      font-weight: 700;
      color: var(--bg-orange);
      letter-spacing: 0.5px;
    }
    header p {
      margin: 0;
      font-size: 1.05rem;
      color: var(--green-700);
      letter-spacing: 0.2px;
    }
    .user-id {
      font-size: 1rem;
      color: var(--white);
      background: linear-gradient(135deg, var(--bg-orange) 45%, var(--bg-green) 100%);
      border-radius: 15px;
      padding: 5px 16px;
      font-weight: 600;
      box-shadow: 0 2px 6px rgba(32,68,94,0.04), 0 0 0 3px rgba(76,175,80,0.15);
    }
    .cards-container {
      display: flex;
      gap: 28px;
      justify-content: center;
      align-items: stretch;
      padding: 48px 5vw 120px 5vw;
      flex-wrap: wrap;
    }
    a.action-card {
      text-decoration: none;
      color: inherit;
      background: linear-gradient(120deg, var(--card-start) 60%, var(--card-end) 100%);
      border-radius: 18px;
      min-width: 220px;
      max-width: 270px;
      flex: 1 1 220px;
      box-shadow: 0 3px 15px rgba(32,68,94,0.07);
      padding: 32px 22px 24px 22px;
      text-align: center;
      transition: box-shadow 0.18s, transform 0.18s;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      -webkit-user-select: none;
      user-select: none;
      outline: none;
    }
    a.action-card:focus, a.action-card:hover {
      box-shadow: 0 10px 30px rgba(255,152,0,0.15);
      transform: translateY(-6px) scale(1.02);
    }
    .card-icon {
      font-size: 2.2rem;
      margin-bottom: 18px;
      color: var(--bg-orange);
      text-shadow: 1px 2px 4px var(--bg-green), 0 0 2px #e0e0e0;
    }
    .action-card h2 {
      font-size: 1.18rem;
      color: var(--bg-green);
      margin: 0 0 7px 0;
      font-weight: 700;
      letter-spacing: 0.2px;
    }
    .action-card p {
      margin: 0;
      color: var(--green-700);
      font-size: 1rem;
      line-height: 1.6;
      letter-spacing: 0.1px;
    }
    /* Bottom navigation */
    .bottom-nav {
      width: 100%;
      background: #fff;
      border-top: 1.5px solid #e6eaea;
      display: flex;
      justify-content: space-around;
      align-items: center;
      height: 70px;
      position: fixed;
      bottom: 0;
      left: 0;
      z-index: 12;
      box-shadow: 0 -3px 10px rgba(255,152,0,0.08);
    }
    .nav-item {
      flex: 1 1 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      color: var(--bg-green);
      font-size: 1.06rem;
      font-weight: 500;
      text-decoration: none;
      transition: color 0.19s;
      padding: 7px 0 0 0;
    }
    .nav-item.active, .nav-item:focus, .nav-item:hover {
      color: var(--bg-orange);
      font-weight: 700;
    }
    .nav-icon {
      font-size: 1.6rem;
      margin-bottom: 3px;
    }
    
    /* Circular "Add" emphasized */
    .nav-item.add {
  position: absolute;        /* float above navigation */
  left: 50%;
  bottom: 18px;
  transform: translateX(-50%);
  width: 58px;
  height: 58px;
  border-radius: 50%;        /* full circle */
  background: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #744bda;
  font-size: 2.3rem;
  font-weight: bold;
  box-shadow: 0 8px 24px rgba(80,80,80);
  border: none;
  padding: 0;                /* ensure no padding */
  z-index: 20;
}

/* Optional: Hover style for depth */
.nav-item.add:hover, .nav-item.add:focus {
  box-shadow: 0 6px 20px rgba(0,0,0,0.30);
  outline: none;
}


.nav-item.add:hover, .nav-item.add:focus {
  box-shadow: 0 6px 16px rgba(0,0,0,0.25);
  outline: none;
}

    @media (max-width: 900px) {
      .cards-container {
        flex-direction: column;
        align-items: center;
        gap: 22px;
        padding: 35px 2vw 140px 2vw;
      }
      header {
        padding: 20px 18px;
      }
      .welcome-container { align-items: flex-start; }
    }
  /* Dropdown Overlay and Menu */
.dropdown-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.45);
  display: none; /* Hidden by default */
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.dropdown-menu {
  background: #fff;
  border-radius: 16px;
  padding: 20px 30px;
  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  min-width: 220px;
}
.dropdown-item {
  font-size: 1.1rem;
  color: var(--green-700, #19744a);
  margin: 12px 0;
  text-decoration: none;
  font-weight: 600;
  cursor: pointer;
  transition: color 0.2s;
}

.dropdown-item:hover{
  color: var(--bg-orange, #ff9800);
  outline: none;
}

/* Show overlay when active */
.dropdown-overlay.active {
  display: flex;
}

/* üî• Moving transparent overlay */
.background-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 300%;
  height: 300%;
  background: rgba(255, 255, 255, 0.2);
  transform: rotate(25deg);
  animation: moveOverlay 12s linear infinite;
  z-index: 0;
  pointer-events: none;
}

@keyframes moveOverlay {
  0%   { transform: translateX(-80%) rotate(25deg); }
  100% { transform: translateX(80%) rotate(25deg); }
}

/* Make sure your actual content stays above overlay */
header, .cards-container, .bottom-nav {
  position: relative;
  z-index: 1;
}
.bottom-nav{
  position: fixed;
  z-index: 1;
}
.admin-id {
  font-size: 1rem;
  color: var(--white);
  background: linear-gradient(135deg, var(--bg-orange) 45%, var(--bg-green) 100%);
  border-radius: 15px;
  padding: 5px 16px;
  font-weight: 600;
  box-shadow: 0 2px 6px rgba(32,68,94,0.04), 0 0 0 3px rgba(76,175,80,0.15);
  text-decoration: none;
  display: inline-block;
  transition: background 0.3s, transform 0.2s;
  border: none;          /* remove default button border */
  cursor: pointer;       /* make it clear it‚Äôs clickable */
  font-family: inherit;  /* keep consistent font */
}

.admin-id:hover {
  background: linear-gradient(135deg, var(--bg-green) 45%, var(--bg-orange) 100%);
  transform: scale(1.05);
  text-decoration: none;
}
/* ---------------- Chatbot Styles ---------------- */
#chat-input {
  display: flex;
  align-items: center;
  padding: 10px;
  border-top: 1px solid #e0e0e0;
  background: #ffffff;
  border-radius: 0 0 15px 15px;
  gap: 10px;
}

#user-input {
  flex: 1;
  padding: 12px 16px;
  border: none;
  border-radius: 25px;
  font-size: 15px;
  outline: none;
  background: #FFF8E1;
  transition: all 0.3s ease;
  color: #000;
}
#user-input:focus {
  background: #FFF3C4;
  box-shadow: 0 0 6px rgba(0,132,255,0.2);
  border: 1px solid #FFA500;
}

#send-btn {
  background: linear-gradient(135deg, #66BB6A, #4CAF50);
  border: none;
  color: white;
  font-size: 20px;
  width: 48px;
  height: 48px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  transition: all 0.2s ease;
}
#send-btn:hover {
  transform: scale(1.1);
  background: linear-gradient(135deg, #4CAF50, #388E3C);
}

#chat-button {
  position: fixed;
  bottom: 90px;  /* ‚¨ÖÔ∏è adjust to stay above bottom nav */
  right: 20px;
  background: #ffffff;
  color: black;
  border: 2px solid black;
  border-radius: 50%;
  width: 65px;
  height: 65px;
  font-size: 32px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
  transition: transform 0.2s ease, background 0.3s ease;
  z-index: 2000; /* keep above everything */
}
#chat-button:hover { transform: scale(1.1); }

#chatbox {
  position: fixed;
  bottom: 160px;  /* ‚¨ÖÔ∏è leave room for nav + button */
  right: 20px;
  width: 320px;
  height: 450px;
  border-radius: 15px;
  background: #f9f9f9;
  display: none;
  flex-direction: column;
  box-shadow: 0 6px 12px rgba(0,0,0,0.2);
  font-family: 'Segoe UI', sans-serif;
  z-index: 2000;
}

#chat-header {
  background: linear-gradient(135deg, #FFA500, #4CAF50);
  color: white;
  padding: 12px;
  border-radius: 15px 15px 0 0;
  font-weight: bold;
  text-align: center;
  font-size: 16px;
}
#chat-messages {
  flex: 1;
  padding: 12px;
  overflow-y: auto;
  font-size: 14px;
}

.message {
  display: block;
  margin: 8px 0;
  padding: 8px 12px;
  border-radius: 12px;
  max-width: 80%;
  white-space: pre-line;
  word-wrap: break-word;
}
.user { background: #FFA500; text-align: right; color: white; margin-left: auto; }
.bot { background: #4CAF50; text-align: left; color: white; margin-right: auto; }

  </style>
</head>
<body>
 

  <header>
  <!-- üî• Moving background overlay -->
  <div class="background-overlay"></div>
  <div class="welcome-container">
    <h1>Welcome To Civic Reporting System</h1>
    <p>Report, rate, and improve civic services with ease</p>
  </div>
  <button class="admin-id" onclick="window.location.href='profile.html'">User: citizen123</button>
</header>

  <section class="cards-container" aria-label="Main actions">
    <a class="action-card" href="post-complaint.html" aria-label="Post a Complaint">
      <div class="card-icon" aria-hidden="true">üìù</div>
      <h2>Post a Complaint</h2>
      <p>Raise civic issues quickly</p>
    </a>
    <a class="action-card" href="review-complaint.html" aria-label="See Complaints">
      <div class="card-icon" aria-hidden="true">üìã</div>
      <h2>See Complaints</h2>
      <p>Vote Other's Complaint</p>
    </a>
    <a class="action-card" href="Solved-Stats.html" aria-label="Solved Stats">
      <div class="card-icon" aria-hidden="true">üìä</div>
      <h2>Solved Stats</h2>
      <p>Impact of Us</p>
    </a>
    <a class="action-card" href="feedback.html" aria-label="Provide Feedback">
      <div class="card-icon" aria-hidden="true">üí¨</div>
      <h2>Provide Feedback</h2>
      <p>Help us improve</p>
    </a>
  </section>
  <nav class="bottom-nav"  aria-label="Bottom navigation">
    <a href="index.html" class="nav-item active" aria-label="Home">
      <div class="nav-icon">üè†</div>
      Home
    </a>
    <a href="about-us.html" class="nav-item" aria-label="About Us">
      <div class="nav-icon">üë•</div>
      About Us
    </a>
   <div 
  class="nav-item add" 
  id="addMenuBtn" 
  role="button"
  tabindex="0" 
  aria-haspopup="true" 
  aria-expanded="false" 
  aria-label="Add new content menu"
>
  <div class="nav-icon">‚ûï</div>
</div>


    <a href="Notifications.html" class="nav-item" aria-label="Notifications">
      <div class="nav-icon">üîî</div>
      Notifications
    </a>
    <a href="profile.html" class="nav-item" aria-label="Profile">
      <div class="nav-icon">üë§</div>
      Profile
    </a>
  </nav>
  <!-- Dropdown overlay and menu for Add -->
<div 
  id="dropdownOverlay" 
  class="dropdown-overlay" 
  aria-hidden="true" 
  tabindex="-1"
>
  <div 
    class="dropdown-menu" 
    role="menu" 
    aria-labelledby="addMenuBtn" 
    tabindex="0"
  >
    <a 
      href="post-complaint.html" 
      class="dropdown-item" 
      role="menuitem" 
      tabindex="0"
    >
      Post a Complaint
    </a>
    <a 
      href="review-complaint.html" 
      class="dropdown-item" 
      role="menuitem" 
      tabindex="0"
    >
      Review Posted Complaint
    </a>
    <a 
      href="feedback.html" 
      class="dropdown-item" 
      role="menuitem" 
      tabindex="0"
    >
      Add Feedback
    </a>
  </div>
</div>


  <script>
    document.querySelectorAll('a.action-card').forEach(a => {
      a.addEventListener('keydown', (e) => {
        if (e.key === ' ' || e.key === 'Enter') {
          e.preventDefault();
          a.click();
        }
      });
    });
  </script>
  <script>
  const addMenuBtn = document.getElementById('addMenuBtn');
  const dropdownOverlay = document.getElementById('dropdownOverlay');

  function toggleDropdown(show) {
    if (show === undefined) {
      show = !dropdownOverlay.classList.contains('active');
    }
    dropdownOverlay.classList.toggle('active', show);
    addMenuBtn.setAttribute('aria-expanded', show);

    if (show) {
      const firstItem = dropdownOverlay.querySelector('.dropdown-item');
      if (firstItem) firstItem.focus();
    } else {
      addMenuBtn.focus();
    }
  }

  addMenuBtn.addEventListener('click', () => toggleDropdown());

  addMenuBtn.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      toggleDropdown();
    }
  });

  dropdownOverlay.addEventListener('click', (e) => {
    if (e.target === dropdownOverlay) {
      toggleDropdown(false);
    }
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && dropdownOverlay.classList.contains('active')) {
      toggleDropdown(false);
    }
  });

  document.querySelectorAll('.dropdown-item').forEach((item) => {
    item.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        toggleDropdown(false);
        addMenuBtn.focus();
      }
    });
  });
</script>
<!-- Floating Chat Button -->
<button id="chat-button">üí¨</button>

<!-- Chatbox -->
<div id="chatbox">
  <div id="chat-header">EcoBot</div>
  <div id="chat-messages"></div>
  <div id="chat-input">
    <input type="text" id="user-input" placeholder="Type your issue..." />
    <button id="send-btn">‚û§</button>
  </div>
</div>
<script>
  const API_KEY = "YOUR_GEMINI_API_KEY"; // replace with your key
  const chatButton = document.getElementById("chat-button");
  const chatbox = document.getElementById("chatbox");
  const chatMessages = document.getElementById("chat-messages");
  const userInput = document.getElementById("user-input");
  const sendBtn = document.getElementById("send-btn");

  chatButton.onclick = () => {
    chatbox.style.display = chatbox.style.display === "flex" ? "none" : "flex";
  };

  function addMessage(text, sender) {
    const message = document.createElement("div");
    message.className = "message " + sender;
    message.innerHTML = text;
    chatMessages.appendChild(message);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    addMessage(message, "user");
    userInput.value = "";
    addMessage("Thinking...", "bot");

    try {
      const response = await fetch(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=" + API_KEY,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              { role: "user", parts: [{ text:
                "You are a civic issue assistant. Rules:\n" +
                "1. Only answer questions related to civic issues.\n" +
                "2. If unrelated, reply exactly: 'Sorry, I can only help with civic issues.'\n" +
                "3. Always respond with short numbered/bulleted steps.\n" +
                "User's issue: " + message
              }] }
            ]
          })
        }
      );

      const data = await response.json();
      let botReply = data.candidates?.[0]?.content?.parts?.[0]?.text || "Sorry, I couldn't process that.";
      chatMessages.lastChild.remove();
      addMessage(botReply, "bot");

    } catch (err) {
      chatMessages.lastChild.remove();
      addMessage("Error: " + err.message, "bot");
    }
  }

  sendBtn.onclick = sendMessage;
  userInput.addEventListener("keypress", e => {
    if (e.key === "Enter") sendMessage();
  });
</script>

</body>
</html>
